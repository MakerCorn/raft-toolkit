version: '3.8'

services:
  # RAFT Web Application
  raft-web:
    image: ghcr.io/microsoft/raft-toolkit:web-latest
    container_name: raft-web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8000}:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - RAFT_ENVIRONMENT=production
      - RAFT_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RAFT_LOG_FORMAT=json
      - RAFT_HOST=0.0.0.0
      - RAFT_PORT=8000
      - RAFT_WORKERS=${WEB_WORKERS:-4}
      - PYTHONUNBUFFERED=1
    volumes:
      - raft_data:/app/data
      - raft_outputs:/app/outputs
      - raft_uploads:/app/uploads
      - raft_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - raft-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.raft-web.rule=Host(`${DOMAIN_NAME:-localhost}`)"
      - "traefik.http.routers.raft-web.entrypoints=websecure"
      - "traefik.http.routers.raft-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.raft-web.loadbalancer.server.port=8000"

  # RAFT CLI (for background processing)
  raft-cli:
    image: ghcr.io/microsoft/raft-toolkit:cli-latest
    container_name: raft-cli
    restart: unless-stopped
    command: ["sleep", "infinity"]  # Keep container running for exec commands
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RAFT_ENVIRONMENT=cli
      - RAFT_LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    volumes:
      - raft_data:/app/data
      - raft_outputs:/app/outputs
      - raft_logs:/app/logs
    networks:
      - raft-network
    labels:
      - "traefik.enable=false"

  # Redis for background tasks and caching
  redis:
    image: redis:7-alpine
    container_name: raft-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --save 900 1 --save 300 10 --save 60 10000 --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - raft-network
    labels:
      - "traefik.enable=false"

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: raft-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - raft-web
    networks:
      - raft-network
    labels:
      - "traefik.enable=false"
    profiles:
      - nginx

  # Traefik reverse proxy (alternative to nginx)
  traefik:
    image: traefik:v3.0
    container_name: raft-traefik
    restart: unless-stopped
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"
      - "${TRAEFIK_HTTPS_PORT:-443}:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_acme:/acme.json
    networks:
      - raft-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME:-localhost}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
    profiles:
      - traefik

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: raft-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - raft-network
    profiles:
      - monitoring

  # Grafana dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: raft-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - raft-network
    profiles:
      - monitoring

volumes:
  raft_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}
  raft_outputs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${OUTPUT_DIR:-./outputs}
  raft_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${UPLOAD_DIR:-./uploads}
  raft_logs:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  traefik_acme:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  raft-network:
    driver: bridge
    name: raft-toolkit-network