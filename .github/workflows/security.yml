name: Security & Dependencies

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - '**/requirements*.txt'
      - 'Dockerfile*'
      - 'docker-compose*.yml'
  workflow_dispatch:

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Run Safety scan for Python dependencies
      run: |
        echo "## 🔍 Dependency Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
        
        # Check all requirements files
        for req_file in requirements*.txt; do
          if [[ -f "$req_file" ]]; then
            echo "### Scanning $req_file" >> $GITHUB_STEP_SUMMARY
            if safety check -r "$req_file" --json --output safety-report-$(basename $req_file .txt).json; then
              echo "✅ No vulnerabilities found in $req_file" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Vulnerabilities found in $req_file" >> $GITHUB_STEP_SUMMARY
              echo "See artifacts for detailed report" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done

    - name: Run Bandit security scan
      run: |
        echo "### 🔒 Security Code Scan (Bandit)" >> $GITHUB_STEP_SUMMARY
        if bandit -r . -f json -o bandit-report.json --exclude tests/,docs/; then
          echo "✅ No security issues found in source code" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security issues found in source code" >> $GITHUB_STEP_SUMMARY
          echo "See artifacts for detailed report" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Run Semgrep security scan
      run: |
        echo "### 🛡️ Advanced Security Scan (Semgrep)" >> $GITHUB_STEP_SUMMARY
        if semgrep --config=auto --json --output=semgrep-report.json .; then
          echo "✅ No security issues found by Semgrep" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security issues found by Semgrep" >> $GITHUB_STEP_SUMMARY
          echo "See artifacts for detailed report" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_id }}
        path: |
          safety-report-*.json
          bandit-report.json
          semgrep-report.json

  docker-security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        load: true
        tags: raft-toolkit:scan
        cache-from: type=gha

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'raft-toolkit:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Docker Scout (if available)
      if: github.event_name != 'schedule'
      run: |
        if command -v docker-scout &> /dev/null; then
          echo "### 🐳 Docker Scout Scan" >> $GITHUB_STEP_SUMMARY
          docker scout cves raft-toolkit:scan --format sarif --output docker-scout.sarif || true
          if [[ -f docker-scout.sarif ]]; then
            echo "✅ Docker Scout scan completed" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "Docker Scout not available, skipping" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Docker security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-security-reports-${{ github.run_id }}
        path: |
          trivy-results.sarif
          docker-scout.sarif

  dependency-update:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools

    - name: Update dependencies
      run: |
        # Update base requirements
        if [[ -f requirements.in ]]; then
          pip-compile --upgrade requirements.in
        else
          # Create .in file from .txt file
          cp requirements.txt requirements.in
          pip-compile --upgrade requirements.in
        fi
        
        # Update web requirements
        if [[ -f requirements-web.in ]]; then
          pip-compile --upgrade requirements-web.in
        elif [[ -f requirements-web.txt ]]; then
          cp requirements-web.txt requirements-web.in
          pip-compile --upgrade requirements-web.in
        fi
        
        # Update test requirements
        if [[ -f requirements-test.in ]]; then
          pip-compile --upgrade requirements-test.in
        elif [[ -f requirements-test.txt ]]; then
          cp requirements-test.txt requirements-test.in
          pip-compile --upgrade requirements-test.in
        fi

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet; then
          echo "No dependency updates available"
          echo "has-changes=false" >> $GITHUB_OUTPUT
        else
          echo "Dependencies updated"
          echo "has-changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.changes.outputs.has-changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'chore: automated dependency updates'
        body: |
          ## 🤖 Automated Dependency Updates
          
          This PR contains automated dependency updates generated by the security workflow.
          
          ### Changes
          - Updated Python dependencies to latest compatible versions
          - Security vulnerabilities (if any) have been addressed
          
          ### Testing
          - [ ] All tests pass
          - [ ] Security scans pass
          - [ ] Manual testing completed
          
          **Please review the changes before merging.**
        branch: dependencies/auto-update-${{ github.run_id }}
        delete-branch: true

  license-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pip-licenses

    - name: Generate license report
      run: |
        echo "## 📜 License Compliance Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Generate license report
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md
        
        # Count licenses
        TOTAL_PACKAGES=$(jq length licenses.json)
        echo "**Total packages analyzed:** $TOTAL_PACKAGES" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for problematic licenses
        PROBLEMATIC_LICENSES=("GPL" "AGPL" "LGPL" "CC BY-SA")
        echo "### 🚨 License Issues" >> $GITHUB_STEP_SUMMARY
        
        ISSUES_FOUND=false
        for license in "${PROBLEMATIC_LICENSES[@]}"; do
          if jq -r '.[].License' licenses.json | grep -i "$license" > /dev/null; then
            echo "❌ Found potentially problematic license: $license" >> $GITHUB_STEP_SUMMARY
            ISSUES_FOUND=true
          fi
        done
        
        if [[ "$ISSUES_FOUND" == "false" ]]; then
          echo "✅ No problematic licenses found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report-${{ github.run_id }}
        path: |
          licenses.json
          licenses.md

  compliance-summary:
    needs: [dependency-scan, docker-security-scan, license-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Generate compliance summary
      run: |
        echo "## 🛡️ Security & Compliance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Security Scan | ${{ needs.docker-security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Compliance | ${{ needs.license-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.dependency-scan.result }}" == "success" && 
              "${{ needs.docker-security-scan.result }}" == "success" && 
              "${{ needs.license-scan.result }}" == "success" ]]; then
          echo "🎉 **All security and compliance checks passed!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Some security or compliance issues found. Please review the reports.**" >> $GITHUB_STEP_SUMMARY
        fi