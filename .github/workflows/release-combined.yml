name: Combined Release (CLI + Web)

permissions:
  contents: write  # Required for creating releases and pushing tags
  packages: write  # Required for publishing Docker images
  id-token: write  # Required for trusted publishing (if used)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional - will use changelog if empty)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests (for emergency releases only)'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft release (not published to PyPI)'
        required: false
        type: boolean
        default: false
      prerelease:
        description: 'Mark as pre-release (not published to PyPI)'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io

jobs:
  # Validation job to ensure version format and prepare release
  validate-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      cli_tag: ${{ steps.validate.outputs.cli_tag }}
      web_tag: ${{ steps.validate.outputs.web_tag }}
      combined_tag: ${{ steps.validate.outputs.combined_tag }}
      changelog_content: ${{ steps.changelog.outputs.content }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug inputs
        run: |
          echo "🔍 Workflow inputs:"
          echo "  Version: '${{ github.event.inputs.version }}'"
          echo "  Release type: '${{ github.event.inputs.release_type }}'"
          echo "  Skip tests: '${{ github.event.inputs.skip_tests }}' (parsed: ${{ fromJSON(github.event.inputs.skip_tests || 'false') }})"
          echo "  Draft: '${{ github.event.inputs.draft }}' (parsed: ${{ fromJSON(github.event.inputs.draft || 'false') }})"
          echo "  Prerelease: '${{ github.event.inputs.prerelease }}' (parsed: ${{ fromJSON(github.event.inputs.prerelease || 'false') }})"

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Validate semantic version format
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "❌ Invalid version format. Expected semantic version (e.g., 1.2.3 or 1.2.3-beta.1)"
            exit 1
          fi
          
          # Check if version already exists
          if git tag | grep -q "^v$VERSION$\|^cli-v$VERSION$\|^web-v$VERSION$"; then
            echo "❌ Version $VERSION already exists as a tag"
            exit 1
          fi
          
          # Set outputs
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "cli_tag=cli-v$VERSION" >> $GITHUB_OUTPUT
          echo "web_tag=web-v$VERSION" >> $GITHUB_OUTPUT
          echo "combined_tag=v$VERSION" >> $GITHUB_OUTPUT
          
          echo "✅ Version $VERSION validated successfully"

      - name: Extract changelog content
        id: changelog
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Extract unreleased section from CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            # Get content between [Unreleased] and next version header
            CHANGELOG_CONTENT=$(awk "/## \\[Unreleased\\]/{flag=1; next} /## \\[/{if(flag) exit} flag" CHANGELOG.md | sed '/^$/d' | head -50)
            
            if [ -n "$CHANGELOG_CONTENT" ]; then
              echo "Found changelog content for release"
              # Store in multiline output
              {
                echo "content<<EOF"
                echo "$CHANGELOG_CONTENT"
                echo "EOF"
              } >> $GITHUB_OUTPUT
            else
              echo "No unreleased content found in CHANGELOG.md"
              echo "content=" >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG.md not found"
            echo "content=" >> $GITHUB_OUTPUT
          fi

  # Run comprehensive tests before release (unless skipped)
  test-suite:
    runs-on: ubuntu-latest
    needs: validate-and-prepare
    if: ${{ !fromJSON(github.event.inputs.skip_tests || 'false') }}
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: Debug test execution
        run: |
          echo "🧪 Test suite starting..."
          echo "  Skip tests input: '${{ github.event.inputs.skip_tests }}'"
          echo "  Skip tests parsed: ${{ fromJSON(github.event.inputs.skip_tests || 'false') }}"
          echo "  Should run tests: ${{ !fromJSON(github.event.inputs.skip_tests || 'false') }}"
          echo "  Python version: ${{ matrix.python-version }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,all]"
          
      - name: Run comprehensive tests
        env:
          RAFT_TESTING: "true"
        run: |
          # Run linting
          python -m black --check .
          python -m isort --check .
          python -m flake8 .
          python -m mypy raft_toolkit/ --ignore-missing-imports
          
          # Run security checks
          python -m bandit -r raft_toolkit/ -f json -o bandit-report.json || true
          
          # Run tests with coverage (excluding Docker environment tests)
          echo "🧪 Running tests (excluding Docker environment tests)..."
          python -m pytest tests/ -m "not docker" --cov=raft_toolkit --cov-report=xml --cov-report=term-missing --tb=short --timeout=300
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build and test CLI Docker image
  build-cli:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, test-suite]
    if: always() && (needs.test-suite.result == 'success' || needs.test-suite.result == 'skipped')
    outputs:
      cli-image: ${{ steps.meta.outputs.tags }}
      cli-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Debug build decision
        run: |
          echo "🔨 CLI Build job starting..."
          echo "  Test suite result: '${{ needs.test-suite.result }}'"
          echo "  Skip tests input: '${{ github.event.inputs.skip_tests }}' (parsed: ${{ fromJSON(github.event.inputs.skip_tests || 'false') }})"
          echo "  Should build: ${{ needs.test-suite.result == 'success' || needs.test-suite.result == 'skipped' }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository name
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}
          tags: |
            type=raw,value=${{ needs.validate-and-prepare.outputs.cli_tag }}
            type=raw,value=cli-latest
            type=raw,value=cli-${{ needs.validate-and-prepare.outputs.version }}

      - name: Build and push CLI image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: cli
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test CLI image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:${{ needs.validate-and-prepare.outputs.cli_tag }} --help
          echo "✅ CLI image smoke test passed"
          
          # Optional: Run Docker environment tests inside the container
          # docker run --rm -e TESTING=true ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:${{ needs.validate-and-prepare.outputs.cli_tag }} python -m pytest tests/docker/ -v

  # Build and test Web Docker image
  build-web:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, test-suite]
    if: always() && (needs.test-suite.result == 'success' || needs.test-suite.result == 'skipped')
    outputs:
      web-image: ${{ steps.meta.outputs.tags }}
      web-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set lowercase repository name
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}
          tags: |
            type=raw,value=${{ needs.validate-and-prepare.outputs.web_tag }}
            type=raw,value=web-latest
            type=raw,value=web-${{ needs.validate-and-prepare.outputs.version }}

      - name: Build and push Web image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Web image
        run: |
          # Start web container in background
          echo "🚀 Starting web container..."
          docker run -d --name test-web -p 8000:8000 \
            ${{ env.REGISTRY }}/${{ steps.repo.outputs.name }}:${{ needs.validate-and-prepare.outputs.web_tag }}
          
          # Wait for container to be running
          echo "⏳ Waiting for container to start..."
          sleep 5
          
          # Check container status
          if ! docker ps | grep -q test-web; then
            echo "❌ Container failed to start"
            docker logs test-web
            exit 1
          fi
          
          # Wait for web server to be ready
          echo "🔍 Waiting for web server to be ready..."
          
          # Give it more time to fully start
          sleep 15
          
          # Check if container is still running
          if ! docker ps | grep -q test-web; then
            echo "❌ Container stopped running"
            docker logs test-web
            exit 1
          fi
          
          # Try health check with retries
          echo "🩺 Testing health endpoint..."
          success=false
          
          for i in {1..6}; do
            echo "Health check attempt $i/6..."
            
            # Use wget as alternative to curl, sometimes more reliable
            if wget --quiet --timeout=10 --tries=1 -O- http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ Web image smoke test passed with wget"
              success=true
              break
            fi
            
            # Also try with curl as backup
            if curl -f --connect-timeout 3 --max-time 8 --silent --show-error http://localhost:8000/health > /dev/null 2>&1; then
              echo "✅ Web image smoke test passed with curl"
              success=true
              break
            fi
            
            echo "⏳ Attempt $i failed, waiting 10s..."
            sleep 10
          done
          
          if [ "$success" = false ]; then
            echo "❌ Web image smoke test failed after all attempts"
            echo "📋 Container logs:"
            docker logs test-web
            echo "🔍 Container status:"
            docker ps -a | grep test-web
            echo "🌐 Network connections:"
            ss -tlnp | grep :8000 || echo "No process listening on port 8000"
            echo "📡 Testing direct connection:"
            timeout 5 bash -c 'cat < /dev/null > /dev/tcp/localhost/8000' && echo "Port 8000 is reachable" || echo "Port 8000 is not reachable"
            exit 1
          fi
          
          # Cleanup
          echo "🧹 Cleaning up..."
          docker stop test-web
          docker rm test-web

  # Temporary placeholder - version will be updated after successful completion

  # Publish to PyPI (skip for draft and pre-release builds)
  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, build-cli, build-web]
    if: ${{ !fromJSON(github.event.inputs.draft || 'false') && !fromJSON(github.event.inputs.prerelease || 'false') }}
    environment: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main  # Get latest with version updates

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build
          
          # Verify package contents
          twine check dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
          echo "✅ Published to PyPI successfully"

  # Create combined GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, build-cli, build-web]
    if: always() && needs.build-cli.result == 'success' && needs.build-web.result == 'success'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main  # Get latest with version updates
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Set lowercase repository name
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Create release tags
        run: |
          CLI_TAG="${{ needs.validate-and-prepare.outputs.cli_tag }}"
          WEB_TAG="${{ needs.validate-and-prepare.outputs.web_tag }}"
          COMBINED_TAG="${{ needs.validate-and-prepare.outputs.combined_tag }}"
          
          # Create and push all tags
          git tag "$CLI_TAG"
          git tag "$WEB_TAG" 
          git tag "$COMBINED_TAG"
          
          git push origin "$CLI_TAG"
          git push origin "$WEB_TAG"
          git push origin "$COMBINED_TAG"
          
          echo "✅ Created tags: $CLI_TAG, $WEB_TAG, $COMBINED_TAG"

      - name: Prepare release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          CLI_TAG="${{ needs.validate-and-prepare.outputs.cli_tag }}"
          WEB_TAG="${{ needs.validate-and-prepare.outputs.web_tag }}"
          GITHUB_REPOSITORY="${{ steps.repo.outputs.name }}"
          
          # Use provided notes or changelog content
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          elif [ -n "${{ needs.validate-and-prepare.outputs.changelog_content }}" ]; then
            RELEASE_NOTES="${{ needs.validate-and-prepare.outputs.changelog_content }}"
          else
            RELEASE_NOTES="Combined release of RAFT Toolkit CLI and Web components."
          fi
          
          # Create comprehensive release notes using cat with proper escaping
          {
            echo "# RAFT Toolkit v${VERSION} - Combined Release 🚀"
            echo ""
            echo "This is a combined release that includes both CLI and Web components of RAFT Toolkit."
            echo ""
            echo "## What is Included"
            echo ""
            echo "### 📱 CLI Component"
            echo "- **Tag**: \\\`${CLI_TAG}\\\`"
            echo "- **Docker Image**: \\\`ghcr.io/${GITHUB_REPOSITORY}:${CLI_TAG}\\\`"
            if [ "${{ fromJSON(github.event.inputs.draft || 'false') }}" != "true" ] && [ "${{ fromJSON(github.event.inputs.prerelease || 'false') }}" != "true" ]; then
              echo "- **PyPI Package**: \\\`pip install raft-toolkit==${VERSION}\\\`"
            else
              echo "- **PyPI Package**: Not published (draft/pre-release)"
            fi
            echo ""
            echo "### 🌐 Web Component"
            echo "- **Tag**: \\\`${WEB_TAG}\\\`"
            echo "- **Docker Image**: \\\`ghcr.io/${GITHUB_REPOSITORY}:${WEB_TAG}\\\`"
            if [ "${{ fromJSON(github.event.inputs.draft || 'false') }}" != "true" ] && [ "${{ fromJSON(github.event.inputs.prerelease || 'false') }}" != "true" ]; then
              echo "- **PyPI Package**: \\\`pip install raft-toolkit[web]==${VERSION}\\\`"
            else
              echo "- **PyPI Package**: Not published (draft/pre-release)"
            fi
            echo ""
            echo "## Release Notes"
            echo ""
            echo "${RELEASE_NOTES}"
            echo ""
            echo "## Installation Options"
            echo ""
            echo "### CLI Usage"
            echo "\\\`\\\`\\\`bash"
            if [ "${{ fromJSON(github.event.inputs.draft || 'false') }}" != "true" ] && [ "${{ fromJSON(github.event.inputs.prerelease || 'false') }}" != "true" ]; then
              echo "# Install from PyPI"
              echo "pip install raft-toolkit==${VERSION}"
              echo ""
            fi
            echo "# Run with Docker"
            echo "docker run ghcr.io/${GITHUB_REPOSITORY}:${CLI_TAG} --help"
            echo "\\\`\\\`\\\`"
            echo ""
            echo "### Web Application"
            echo "\\\`\\\`\\\`bash"
            if [ "${{ fromJSON(github.event.inputs.draft || 'false') }}" != "true" ] && [ "${{ fromJSON(github.event.inputs.prerelease || 'false') }}" != "true" ]; then
              echo "# Install with web dependencies"
              echo "pip install raft-toolkit[web]==${VERSION}"
              echo ""
              echo "# Run web server"
              echo "python -m raft_toolkit.web.app"
              echo ""
            fi
            echo "# Run with Docker"
            echo "docker run -p 8000:8000 ghcr.io/${GITHUB_REPOSITORY}:${WEB_TAG}"
            echo "\\\`\\\`\\\`"
            echo ""
            echo "## Docker Images"
            echo ""
            echo "| Component | Image | Size | Platforms |"
            echo "|-----------|-------|------|-----------|"
            echo "| CLI | \\\`ghcr.io/${GITHUB_REPOSITORY}:${CLI_TAG}\\\` | Lightweight | linux/amd64, linux/arm64 |"
            echo "| Web | \\\`ghcr.io/${GITHUB_REPOSITORY}:${WEB_TAG}\\\` | Full-featured | linux/amd64, linux/arm64 |"
            echo ""
            echo "## Security"
            echo ""
            echo "All images are built with security best practices:"
            echo "- 🔒 Non-root user"
            echo "- 🛡️ Minimal attack surface"
            echo "- 🔍 Regular security scanning"
            echo "- 📋 SBOM included"
            echo ""
            echo "---"
            echo ""
            echo "🤖 Generated with [Claude Code](https://claude.ai/code)"
            echo ""
            echo "Co-Authored-By: Claude <noreply@anthropic.com>"
          } > release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-and-prepare.outputs.combined_tag }}
          name: "RAFT Toolkit v${{ needs.validate-and-prepare.outputs.version }}"
          body_path: release_notes.md
          draft: ${{ fromJSON(github.event.inputs.draft || 'false') }}
          prerelease: ${{ fromJSON(github.event.inputs.prerelease || 'false') || contains(needs.validate-and-prepare.outputs.version, '-') }}
          generate_release_notes: true
          make_latest: ${{ !fromJSON(github.event.inputs.draft || 'false') && !fromJSON(github.event.inputs.prerelease || 'false') }}

  # Notify on completion
  notify-success:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, create-release, publish-pypi, finalize-version]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Set lowercase repository name
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Success notification
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          
          echo "🎉 Combined Release v$VERSION completed successfully!"
          echo ""
          echo "📋 Summary:"
          echo "  • CLI Tag: ${{ needs.validate-and-prepare.outputs.cli_tag }}"
          echo "  • Web Tag: ${{ needs.validate-and-prepare.outputs.web_tag }}"
          echo "  • Combined Tag: ${{ needs.validate-and-prepare.outputs.combined_tag }}"
          if [ "${{ fromJSON(github.event.inputs.draft || 'false') }}" == "true" ]; then
            echo "  • Type: Draft Release (not published to PyPI)"
          elif [ "${{ fromJSON(github.event.inputs.prerelease || 'false') }}" == "true" ]; then
            echo "  • Type: Pre-release (not published to PyPI)"
          else
            echo "  • PyPI: https://pypi.org/project/raft-toolkit/$VERSION/"
          fi
          echo "  • GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-and-prepare.outputs.combined_tag }}"
          echo ""
          echo "🐳 Docker Images:"
          echo "  • CLI: ghcr.io/${{ steps.repo.outputs.name }}:${{ needs.validate-and-prepare.outputs.cli_tag }}"
          echo "  • Web: ghcr.io/${{ steps.repo.outputs.name }}:${{ needs.validate-and-prepare.outputs.web_tag }}"
          echo ""
          if [ "${{ needs.finalize-version.result }}" == "success" ]; then
            echo "✅ Version v$VERSION has been finalized in the repository"
          else
            echo "⚠️  Version finalization may have failed - check finalize-version job"
          fi

  # Update version in code after successful release completion
  finalize-version:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, create-release, publish-pypi]
    if: always() && needs.create-release.result == 'success' && (needs.publish-pypi.result == 'success' || needs.publish-pypi.result == 'skipped')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Set lowercase repository name
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          
          # Update version in pyproject.toml
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          
          echo "✅ Updated version to $VERSION in pyproject.toml"

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          if [ -f "CHANGELOG.md" ]; then
            # Replace [Unreleased] with version and date, add new [Unreleased] section
            sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [$VERSION] - $DATE/" CHANGELOG.md
            
            echo "✅ Updated CHANGELOG.md with version $VERSION"
          else
            echo "⚠️  CHANGELOG.md not found, skipping changelog update"
          fi

      - name: Commit version changes
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          
          git add pyproject.toml CHANGELOG.md
          git commit -m "$(cat <<EOF
          chore: bump version to $VERSION after successful release
          
          Release completed successfully:
          - GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-and-prepare.outputs.combined_tag }}
          - CLI Docker: ghcr.io/${{ steps.repo.outputs.name }}:${{ needs.validate-and-prepare.outputs.cli_tag }}
          - Web Docker: ghcr.io/${{ steps.repo.outputs.name }}:${{ needs.validate-and-prepare.outputs.web_tag }}
          
          🚀 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>
          EOF
          )"
          
          git push origin main
          echo "✅ Version bump committed and pushed to main branch"

  # Handle failures and cleanup
  notify-failure:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, test-suite, build-cli, build-web, publish-pypi, create-release, finalize-version]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "❌ Combined release failed!"
          echo "Please check the workflow logs and resolve any issues."
          echo ""
          echo "You may need to:"
          echo "  • Fix any failing tests or builds"
          echo "  • Revert version changes if they were committed"
          echo "  • Clean up any partial Docker images"
          echo "  • Remove any tags that were created"