name: Combined Release (CLI + Web)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional - will use changelog if empty)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests (for emergency releases only)'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Validation job to ensure version format and prepare release
  validate-and-prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      cli_tag: ${{ steps.validate.outputs.cli_tag }}
      web_tag: ${{ steps.validate.outputs.web_tag }}
      combined_tag: ${{ steps.validate.outputs.combined_tag }}
      changelog_content: ${{ steps.changelog.outputs.content }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Validate semantic version format
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "❌ Invalid version format. Expected semantic version (e.g., 1.2.3 or 1.2.3-beta.1)"
            exit 1
          fi
          
          # Check if version already exists
          if git tag | grep -q "^v$VERSION$\|^cli-v$VERSION$\|^web-v$VERSION$"; then
            echo "❌ Version $VERSION already exists as a tag"
            exit 1
          fi
          
          # Set outputs
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "cli_tag=cli-v$VERSION" >> $GITHUB_OUTPUT
          echo "web_tag=web-v$VERSION" >> $GITHUB_OUTPUT
          echo "combined_tag=v$VERSION" >> $GITHUB_OUTPUT
          
          echo "✅ Version $VERSION validated successfully"

      - name: Extract changelog content
        id: changelog
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Extract unreleased section from CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            # Get content between [Unreleased] and next version header
            CHANGELOG_CONTENT=$(awk '/## \[Unreleased\]/{flag=1; next} /## \[/{if(flag) exit} flag' CHANGELOG.md | sed '/^$/d' | head -50)
            
            if [ -n "$CHANGELOG_CONTENT" ]; then
              echo "Found changelog content for release"
              # Store in multiline output
              {
                echo "content<<EOF"
                echo "$CHANGELOG_CONTENT"
                echo "EOF"
              } >> $GITHUB_OUTPUT
            else
              echo "No unreleased content found in CHANGELOG.md"
              echo "content=" >> $GITHUB_OUTPUT
            fi
          else
            echo "CHANGELOG.md not found"
            echo "content=" >> $GITHUB_OUTPUT
          fi

  # Run comprehensive tests before release (unless skipped)
  test-suite:
    if: ${{ !github.event.inputs.skip_tests }}
    runs-on: ubuntu-latest
    needs: validate-and-prepare
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,all]"
          
      - name: Run comprehensive tests
        run: |
          # Run linting
          python -m black --check .
          python -m isort --check .
          python -m flake8 .
          python -m mypy raft_toolkit/ --ignore-missing-imports
          
          # Run security checks
          python -m bandit -r raft_toolkit/ -f json -o bandit-report.json || true
          
          # Run tests with coverage
          python -m pytest --cov=raft_toolkit --cov-report=xml --cov-report=term-missing
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build and test CLI Docker image
  build-cli:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, test-suite]
    if: always() && (needs.test-suite.result == 'success' || github.event.inputs.skip_tests == 'true')
    outputs:
      cli-image: ${{ steps.meta.outputs.tags }}
      cli-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.validate-and-prepare.outputs.cli_tag }}
            type=raw,value=cli-latest
            type=raw,value=cli-${{ needs.validate-and-prepare.outputs.version }}

      - name: Build and push CLI image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: cli
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test CLI image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-and-prepare.outputs.cli_tag }} --help
          echo "✅ CLI image smoke test passed"

  # Build and test Web Docker image
  build-web:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, test-suite]
    if: always() && (needs.test-suite.result == 'success' || github.event.inputs.skip_tests == 'true')
    outputs:
      web-image: ${{ steps.meta.outputs.tags }}
      web-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.validate-and-prepare.outputs.web_tag }}
            type=raw,value=web-latest
            type=raw,value=web-${{ needs.validate-and-prepare.outputs.version }}

      - name: Build and push Web image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Web image
        run: |
          # Start web container in background
          docker run -d --name test-web -p 8000:8000 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-and-prepare.outputs.web_tag }}
          
          # Wait for startup
          sleep 10
          
          # Test health endpoint
          if curl -f http://localhost:8000/health; then
            echo "✅ Web image smoke test passed"
          else
            echo "❌ Web image smoke test failed"
            docker logs test-web
            exit 1
          fi
          
          # Cleanup
          docker stop test-web
          docker rm test-web

  # Update version in code and create changelog entry
  update-version:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, build-cli, build-web]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          
          # Update version in pyproject.toml
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          
          echo "✅ Updated version to $VERSION in pyproject.toml"

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          if [ -f "CHANGELOG.md" ]; then
            # Replace [Unreleased] with version and date, add new [Unreleased] section
            sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [$VERSION] - $DATE/" CHANGELOG.md
            
            echo "✅ Updated CHANGELOG.md with version $VERSION"
          else
            echo "⚠️  CHANGELOG.md not found, skipping changelog update"
          fi

      - name: Commit version changes
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          
          git add pyproject.toml CHANGELOG.md
          git commit -m "$(cat <<EOF
          chore: bump version to $VERSION for combined release
          
          🚀 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>
          EOF
          )"
          
          git push origin main

  # Publish to PyPI
  publish-pypi:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, update-version]
    environment: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main  # Get latest with version updates

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build
          
          # Verify package contents
          twine check dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
          echo "✅ Published to PyPI successfully"

  # Create combined GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, build-cli, build-web, publish-pypi]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main  # Get latest with version updates

      - name: Create release tags
        run: |
          CLI_TAG="${{ needs.validate-and-prepare.outputs.cli_tag }}"
          WEB_TAG="${{ needs.validate-and-prepare.outputs.web_tag }}"
          COMBINED_TAG="${{ needs.validate-and-prepare.outputs.combined_tag }}"
          
          # Create and push all tags
          git tag "$CLI_TAG"
          git tag "$WEB_TAG" 
          git tag "$COMBINED_TAG"
          
          git push origin "$CLI_TAG"
          git push origin "$WEB_TAG"
          git push origin "$COMBINED_TAG"
          
          echo "✅ Created tags: $CLI_TAG, $WEB_TAG, $COMBINED_TAG"

      - name: Prepare release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          
          # Use provided notes or changelog content
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          elif [ -n "${{ needs.validate-and-prepare.outputs.changelog_content }}" ]; then
            RELEASE_NOTES="${{ needs.validate-and-prepare.outputs.changelog_content }}"
          else
            RELEASE_NOTES="Combined release of RAFT Toolkit CLI and Web components."
          fi
          
          # Create comprehensive release notes
          cat > release_notes.md << EOF
# RAFT Toolkit v$VERSION - Combined Release 🚀

This is a combined release that includes both CLI and Web components of RAFT Toolkit.

## What's Included

### 📱 CLI Component
- **Tag**: \`${{ needs.validate-and-prepare.outputs.cli_tag }}\`
- **Docker Image**: \`ghcr.io/${{ github.repository }}:${{ needs.validate-and-prepare.outputs.cli_tag }}\`
- **PyPI Package**: \`pip install raft-toolkit==$VERSION\`

### 🌐 Web Component  
- **Tag**: \`${{ needs.validate-and-prepare.outputs.web_tag }}\`
- **Docker Image**: \`ghcr.io/${{ github.repository }}:${{ needs.validate-and-prepare.outputs.web_tag }}\`
- **PyPI Package**: \`pip install raft-toolkit[web]==$VERSION\`

## Release Notes

$RELEASE_NOTES

## Installation Options

### CLI Usage
\`\`\`bash
# Install from PyPI
pip install raft-toolkit==$VERSION

# Run with Docker
docker run ghcr.io/${{ github.repository }}:${{ needs.validate-and-prepare.outputs.cli_tag }} --help
\`\`\`

### Web Application  
\`\`\`bash
# Install with web dependencies
pip install raft-toolkit[web]==$VERSION

# Run web server
python -m raft_toolkit.web.app

# Run with Docker
docker run -p 8000:8000 ghcr.io/${{ github.repository }}:${{ needs.validate-and-prepare.outputs.web_tag }}
\`\`\`

## Docker Images

| Component | Image | Size | Platforms |
|-----------|-------|------|-----------|
| CLI | \`ghcr.io/${{ github.repository }}:${{ needs.validate-and-prepare.outputs.cli_tag }}\` | Lightweight | linux/amd64, linux/arm64 |
| Web | \`ghcr.io/${{ github.repository }}:${{ needs.validate-and-prepare.outputs.web_tag }}\` | Full-featured | linux/amd64, linux/arm64 |

## Security

All images are built with security best practices:
- 🔒 Non-root user
- 🛡️ Minimal attack surface  
- 🔍 Regular security scanning
- 📋 SBOM included

---

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-and-prepare.outputs.combined_tag }}
          name: "RAFT Toolkit v${{ needs.validate-and-prepare.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(needs.validate-and-prepare.outputs.version, '-') }}
          generate_release_notes: true
          make_latest: true

  # Notify on completion
  notify-success:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, create-release]
    if: success()
    steps:
      - name: Success notification
        run: |
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          
          echo "🎉 Combined Release v$VERSION completed successfully!"
          echo ""
          echo "📋 Summary:"
          echo "  • CLI Tag: ${{ needs.validate-and-prepare.outputs.cli_tag }}"
          echo "  • Web Tag: ${{ needs.validate-and-prepare.outputs.web_tag }}"
          echo "  • Combined Tag: ${{ needs.validate-and-prepare.outputs.combined_tag }}"
          echo "  • PyPI: https://pypi.org/project/raft-toolkit/$VERSION/"
          echo "  • GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-and-prepare.outputs.combined_tag }}"
          echo ""
          echo "🐳 Docker Images:"
          echo "  • CLI: ghcr.io/${{ github.repository }}:${{ needs.validate-and-prepare.outputs.cli_tag }}"
          echo "  • Web: ghcr.io/${{ github.repository }}:${{ needs.validate-and-prepare.outputs.web_tag }}"

  # Handle failures and cleanup
  notify-failure:
    runs-on: ubuntu-latest
    needs: [validate-and-prepare, test-suite, build-cli, build-web, update-version, publish-pypi, create-release]
    if: failure()
    steps:
      - name: Failure notification
        run: |
          echo "❌ Combined release failed!"
          echo "Please check the workflow logs and resolve any issues."
          echo ""
          echo "You may need to:"
          echo "  • Fix any failing tests or builds"
          echo "  • Revert version changes if they were committed"
          echo "  • Clean up any partial Docker images"
          echo "  • Remove any tags that were created"