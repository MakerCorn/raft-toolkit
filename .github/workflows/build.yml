name: Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        target: [production, cli, development]
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=auto
          suffix=-${{ matrix.target }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ${{ matrix.target }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
      continue-on-error: ${{ matrix.target != 'production' }}
    
    - name: Generate build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Target:** ${{ matrix.target }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "**Digest:** ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms:** linux/amd64,linux/arm64" >> $GITHUB_STEP_SUMMARY
    
    - name: Run Trivy vulnerability scanner
      if: matrix.target == 'production' && github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.target }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy scan results to GitHub Security tab
      if: matrix.target == 'production' && hashFiles('trivy-results.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run code linting
      run: |
        echo "## Linting Results" >> $GITHUB_STEP_SUMMARY
        
        # Run flake8
        echo "### Flake8" >> $GITHUB_STEP_SUMMARY
        if flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.venv,__pycache__,.git; then
          echo "✅ No critical flake8 issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Flake8 found critical issues" >> $GITHUB_STEP_SUMMARY
          echo "Continuing build despite linting issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Run black check
        echo "### Black" >> $GITHUB_STEP_SUMMARY
        if black --check . --exclude='\.venv|__pycache__|\.git'; then
          echo "✅ Code formatting is correct" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code formatting issues found" >> $GITHUB_STEP_SUMMARY
          echo "Run 'black .' to fix formatting" >> $GITHUB_STEP_SUMMARY
          echo "Continuing build despite formatting issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Run isort check
        echo "### isort" >> $GITHUB_STEP_SUMMARY
        if isort --check-only . --skip-gitignore; then
          echo "✅ Import sorting is correct" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Import sorting issues found" >> $GITHUB_STEP_SUMMARY
          echo "Run 'isort .' to fix imports" >> $GITHUB_STEP_SUMMARY
          echo "Continuing build despite import sorting issues" >> $GITHUB_STEP_SUMMARY
        fi

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Run safety check
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "### Safety (Dependency Vulnerabilities)" >> $GITHUB_STEP_SUMMARY
        if safety check --json > safety-report.json; then
          echo "✅ No known vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Vulnerabilities found in dependencies" >> $GITHUB_STEP_SUMMARY
          cat safety-report.json >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Run bandit security linter
      run: |
        echo "### Bandit (Security Issues)" >> $GITHUB_STEP_SUMMARY
        if bandit -r . -f json -o bandit-report.json; then
          echo "✅ No security issues found in code" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security issues found in code" >> $GITHUB_STEP_SUMMARY
          cat bandit-report.json >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json