name: Kubernetes

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'k8s/**'
      - 'Dockerfile'
      - '.github/workflows/kubernetes.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'k8s/**'
      - 'Dockerfile'
      - '.github/workflows/kubernetes.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-manifests:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-k8s.txt
        pip install yamllint
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.0'
    
    - name: Validate YAML syntax
      shell: bash
      run: |
        echo "## 🔍 YAML Validation Results" >> $GITHUB_STEP_SUMMARY
        
        # Check if k8s directory exists
        if [ ! -d "k8s" ]; then
          echo "❌ k8s directory not found" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        # Find YAML files
        YAML_FILES=$(find k8s -type f \( -name "*.yaml" -o -name "*.yml" \))
        if [ -z "$YAML_FILES" ]; then
          echo "⚠️ No YAML files found in k8s directory" >> $GITHUB_STEP_SUMMARY
          exit 0
        fi
        
        YAML_ERRORS=0
        echo "$YAML_FILES" | while IFS= read -r file; do
          if [ -f "$file" ]; then
            if ! yamllint -d relaxed "$file" >yamllint.log 2>&1; then
              echo "❌ YAML syntax error in $file" >> $GITHUB_STEP_SUMMARY
              cat yamllint.log >> $GITHUB_STEP_SUMMARY
              YAML_ERRORS=$((YAML_ERRORS + 1))
            fi
          fi
        done
        
        if [ "$YAML_ERRORS" -eq 0 ]; then
          echo "✅ All YAML files have valid syntax" >> $GITHUB_STEP_SUMMARY
          exit 0
        else
          echo "❌ Found $YAML_ERRORS YAML syntax errors" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
    
    - name: Validate Kubernetes manifests
      run: |
        echo "### Kubernetes Manifest Validation" >> $GITHUB_STEP_SUMMARY
        
        validate_manifests() {
          local dir=$1
          local name=$2
          echo "#### $name" >> $GITHUB_STEP_SUMMARY
          
          echo "Building and validating $name manifests..."
          echo "Running kustomize build for $name..."
          
          # Try to build with verbose output
          if ! kustomize build --load-restrictor LoadRestrictionsNone "$dir" 2>kustomize_error.txt 1>build_output.yaml; then
            echo "❌ Failed to build $name manifests" >> $GITHUB_STEP_SUMMARY
            echo "Kustomize build error:" >> $GITHUB_STEP_SUMMARY
            cat kustomize_error.txt >> $GITHUB_STEP_SUMMARY
            echo "Attempted to build:" >> $GITHUB_STEP_SUMMARY
            find "$dir" -type f -name "*.yaml" -exec echo {} \; >> $GITHUB_STEP_SUMMARY
            return 1
          fi
          
          echo "Running kubectl validation for $name..."
          if ! kubectl apply --dry-run=client -f build_output.yaml 2>kubectl_error.txt; then
            echo "❌ $name manifests validation failed" >> $GITHUB_STEP_SUMMARY
            echo "Kubectl validation error:" >> $GITHUB_STEP_SUMMARY
            cat kubectl_error.txt >> $GITHUB_STEP_SUMMARY
            return 1
          fi
          
          echo "✅ $name manifests are valid" >> $GITHUB_STEP_SUMMARY
          return 0
        }
        
        # List all yaml files that will be processed
        echo "### Found Kubernetes Manifests:" >> $GITHUB_STEP_SUMMARY
        find k8s -type f -name "*.yaml" -o -name "*.yml" | sort >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Verify kustomize version
        echo "### Kustomize Version:" >> $GITHUB_STEP_SUMMARY
        kustomize version >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Validate base manifests
        if ! validate_manifests "k8s/base" "Base Manifests"; then
          cat build_output.yaml || true
          exit 1
        fi
        
        # Validate cloud-specific overlays
        for cloud in aks eks gks; do
          if [ -d "k8s/overlays/$cloud" ]; then
            if ! validate_manifests "k8s/overlays/$cloud" "$cloud Overlay"; then
              cat build_output.yaml || true
              exit 1
            fi
          else
            echo "⚠️ $cloud overlay directory not found, skipping validation" >> $GITHUB_STEP_SUMMARY
          fi
        done
    
    - name: Validate Helm chart
      run: |
        echo "### Helm Chart Validation" >> $GITHUB_STEP_SUMMARY
        if [ -d k8s/helm ]; then
          cd k8s/helm
          if helm lint . >/dev/null 2>&1; then
            echo "✅ Helm chart is valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Helm chart validation failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          # Test Helm template rendering
          if helm template test-release . >/dev/null 2>&1; then
            echo "✅ Helm template rendering successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Helm template rendering failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          cd ../..
        else
          echo "⚠️ Helm chart directory not found, skipping Helm validation" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Security scan Kubernetes manifests
      run: |
        echo "### Security Scanning" >> $GITHUB_STEP_SUMMARY
        # Install and run kubesec
        curl -sSX GET "https://api.github.com/repos/controlplaneio/kubesec/releases/latest" \
          | grep '"browser_download_url":' \
          | grep linux \
          | cut -d '"' -f 4 \
          | xargs curl -sSL -o kubesec
        chmod +x kubesec
        # Scan deployments for security issues
        SECURITY_ISSUES=0
        for cloud in base aks eks gks; do
          if [ "$cloud" = "base" ]; then
            manifest_path="k8s/base"
          else
            manifest_path="k8s/overlays/$cloud"
          fi
          if [ -d "$manifest_path" ]; then
            cd "$manifest_path"
            kustomize build . > deployment.yaml
            # Run kubesec scan
            if ./../../kubesec scan deployment.yaml --format=json > kubesec-report.json 2>/dev/null; then
              SCORE=$(jq -r '.[0].score // 0' kubesec-report.json)
              if [ "$SCORE" -ge 0 ]; then
                echo "✅ $cloud security scan passed (score: $SCORE)" >> $GITHUB_STEP_SUMMARY
              else
                echo "⚠️ $cloud security scan found issues (score: $SCORE)" >> $GITHUB_STEP_SUMMARY
                SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
              fi
            else
              echo "⚠️ $cloud security scan failed to run" >> $GITHUB_STEP_SUMMARY
            fi
            rm -f deployment.yaml kubesec-report.json
            cd - >/dev/null
          else
            echo "⚠️ $cloud directory not found, skipping security scan" >> $GITHUB_STEP_SUMMARY
          fi
        done
        rm -f kubesec
        if [ $SECURITY_ISSUES -gt 0 ]; then
          echo "⚠️ Found security issues in $SECURITY_ISSUES configurations" >> $GITHUB_STEP_SUMMARY
          echo "Security issues are non-blocking but should be reviewed" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true

  test-deployments:
    name: Test Kubernetes Deployments
    runs-on: ubuntu-latest
    needs: validate-manifests
    
    strategy:
      matrix:
        cloud: [aks, eks, gks]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        version: v0.20.0
        kubectl_version: v1.28.0
        cluster_name: raft-toolkit-test
        config: |
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
    
    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Load test image
      run: |
        # Build a minimal test image
        docker build -t raft-toolkit:test --target=production .
        kind load docker-image raft-toolkit:test --name raft-toolkit-test
    
    - name: Test ${{ matrix.cloud }} deployment
      run: |
        echo "## 🧪 Testing ${{ matrix.cloud }} Deployment" >> $GITHUB_STEP_SUMMARY
        
        cd k8s/overlays/${{ matrix.cloud }}
        
        # Update image reference for testing
        kustomize edit set image raft-toolkit=raft-toolkit:test
        
        # Apply manifests (exclude ingress which needs specific controllers)
        kustomize build . | kubectl apply -f - || true
        
        # Wait for namespace to be ready
        kubectl wait --for=condition=Ready namespace/raft-toolkit --timeout=60s || true
        
        # Check if deployment was created
        if kubectl get deployment raft-toolkit-web -n raft-toolkit >/dev/null 2>&1; then
          echo "✅ Deployment created successfully" >> $GITHUB_STEP_SUMMARY
          
          # Check deployment status (don't wait for ready since we don't have secrets)
          kubectl get deployment raft-toolkit-web -n raft-toolkit -o yaml | grep -A 5 status: || true
          
          echo "✅ ${{ matrix.cloud }} deployment test completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Deployment creation failed" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        # Cleanup
        kustomize build . | kubectl delete -f - --ignore-not-found=true || true
        cd ../../..
      continue-on-error: true

  build-kubernetes-images:
    name: Build Kubernetes-optimized Images
    runs-on: ubuntu-latest
    needs: validate-manifests
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        platform: 
          - linux/amd64
          - linux/arm64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=auto
          suffix=-k8s
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Kubernetes image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          KUBERNETES_OPTIMIZED=true

  generate-deployment-artifacts:
    name: Generate Deployment Artifacts
    runs-on: ubuntu-latest
    needs: [validate-manifests, test-deployments]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.13.0'
    
    - name: Generate deployment manifests
      run: |
        mkdir -p deployment-artifacts
        
        # Generate manifests for each cloud provider
        for cloud in aks eks gks; do
          echo "Generating $cloud manifests..."
          cd k8s/overlays/$cloud
          
          # Update image to use the latest built image
          kustomize edit set image raft-toolkit=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-k8s
          
          # Generate the manifest
          kustomize build . > ../../../deployment-artifacts/$cloud-deployment.yaml
          cd ../../..
        done
        
        # Generate Helm package
        cd k8s/helm
        helm package . --destination ../../deployment-artifacts/
        cd ../..
        
        # Generate documentation
        echo "# Deployment Artifacts" > deployment-artifacts/README.md
        echo "" >> deployment-artifacts/README.md
        echo "Generated on: $(date -u)" >> deployment-artifacts/README.md
        echo "Commit: ${{ github.sha }}" >> deployment-artifacts/README.md
        echo "" >> deployment-artifacts/README.md
        echo "## Files:" >> deployment-artifacts/README.md
        echo "- \`aks-deployment.yaml\` - Azure Kubernetes Service deployment" >> deployment-artifacts/README.md
        echo "- \`eks-deployment.yaml\` - Amazon Elastic Kubernetes Service deployment" >> deployment-artifacts/README.md
        echo "- \`gks-deployment.yaml\` - Google Kubernetes Engine deployment" >> deployment-artifacts/README.md
        echo "- \`raft-toolkit-*.tgz\` - Helm chart package" >> deployment-artifacts/README.md
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kubernetes-deployment-artifacts
        path: deployment-artifacts/
        retention-days: 30
    
    - name: Generate deployment summary
      run: |
        echo "## 🚀 Kubernetes Deployment Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Available Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- **AKS Deployment**: \`aks-deployment.yaml\`" >> $GITHUB_STEP_SUMMARY
        echo "- **EKS Deployment**: \`eks-deployment.yaml\`" >> $GITHUB_STEP_SUMMARY
        echo "- **GKE Deployment**: \`gks-deployment.yaml\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Helm Chart**: \`raft-toolkit-*.tgz\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Docker Images:" >> $GITHUB_STEP_SUMMARY
        echo "- **Production**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-k8s\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Deploy Commands:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# AKS" >> $GITHUB_STEP_SUMMARY
        echo "kubectl apply -f aks-deployment.yaml" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# EKS" >> $GITHUB_STEP_SUMMARY
        echo "kubectl apply -f eks-deployment.yaml" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# GKE" >> $GITHUB_STEP_SUMMARY
        echo "kubectl apply -f gks-deployment.yaml" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Helm" >> $GITHUB_STEP_SUMMARY
        echo "helm install raft-toolkit ./raft-toolkit-*.tgz" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY