# Multi-stage Dockerfile for RAFT Toolkit (Windows)
# Follows Docker best practices and security guidelines for Windows containers

# Build arguments for dynamic configuration
ARG PYTHON_VERSION=3.11
ARG BUILD_DATE
ARG VERSION=0.2.0
ARG VCS_REF

# Stage 1: Base dependencies (Windows)
# Using Windows Server Core with Python downloaded during build
FROM mcr.microsoft.com/windows/servercore:ltsc2022 AS base

# Add metadata labels
LABEL maintainer="RAFT Toolkit Team" \
      description="Retrieval Augmented Fine-Tuning Toolkit for generating synthetic Q&A datasets" \
      version="${VERSION:-0.2.0}" \
      org.opencontainers.image.title="RAFT Toolkit" \
      org.opencontainers.image.description="Retrieval Augmented Fine-Tuning Toolkit" \
      org.opencontainers.image.version="${VERSION:-0.2.0}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.source="https://github.com/makercorn/raft-toolkit" \
      org.opencontainers.image.licenses="MIT"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH=C:\\app \
    PYTHONIOENCODING=utf-8 \
    PATH="C:\\Python;C:\\Python\\Scripts;${PATH}"

# Install PowerShell Core (required for modern PowerShell commands)
RUN curl -L -o PowerShell.msi https://github.com/PowerShell/PowerShell/releases/download/v7.4.0/PowerShell-7.4.0-win-x64.msi && \
    msiexec /i PowerShell.msi /quiet /norestart && \
    del PowerShell.msi

# Use PowerShell for RUN commands (more reliable on Windows containers)
SHELL ["pwsh", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Download and install Python 3.11
RUN Write-Host "Downloading Python 3.11..."; \
    Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.11.9/python-3.11.9-amd64.exe" -OutFile "python-installer.exe"; \
    Write-Host "Installing Python 3.11..."; \
    Start-Process -FilePath "python-installer.exe" -ArgumentList "/quiet", "InstallAllUsers=1", "PrependPath=1", "Include_test=0", "Include_doc=0", "Include_dev=0", "Include_debug=0", "Include_launcher=0", "InstallLauncherAllUsers=0", "TargetDir=C:\Python" -Wait; \
    Write-Host "Cleaning up installer..."; \
    Remove-Item "python-installer.exe" -Force; \
    Write-Host "Python installation completed"

# Verify Python installation
RUN Write-Host "Verifying Python installation..."; \
    if (Test-Path 'C:\Python\python.exe') { \
        Write-Host "Python executable found at C:\Python\python.exe" \
    } else { \
        Write-Host "ERROR: Python executable not found in copied directory"; \
        Get-ChildItem C:\Python -Recurse -Name "python.exe" -ErrorAction SilentlyContinue; \
        exit 1 \
    }

# Test Python and pip using PATH
RUN Write-Host "Testing Python and pip..."; \
    python --version; \
    if ($LASTEXITCODE -ne 0) { \
        Write-Host "ERROR: Python command failed"; \
        Write-Host "Trying direct path..."; \
        C:\Python\python.exe --version; \
        if ($LASTEXITCODE -ne 0) { \
            Write-Host "ERROR: Direct Python path also failed"; \
            exit 1 \
        } \
    }; \
    \
    python -m pip --version; \
    if ($LASTEXITCODE -ne 0) { \
        Write-Host "ERROR: Pip command failed"; \
        exit 1 \
    }; \
    \
    Write-Host "Python and pip verified successfully"

# Install system dependencies (Windows)
# Skip additional dependencies for basic functionality

# Set working directory
WORKDIR C:\\app

# Stage 2: Dependencies (Windows)
FROM base AS dependencies

# Copy project configuration
COPY pyproject.toml .

# Install Python dependencies with enhanced error handling
RUN python -m pip install --upgrade pip setuptools wheel; if ($LASTEXITCODE -ne 0) { exit 1 }
RUN python -m pip install --no-cache-dir -e .; if ($LASTEXITCODE -ne 0) { exit 1 }
RUN Write-Host "Core dependencies installed successfully"

# Verify critical imports work
RUN python -c "import pypdf; print('PyPDF OK')"
RUN python -c "import openai; print('OpenAI OK')"
RUN python -c "import transformers; print('Transformers OK')"
RUN python -c "import pandas; print('Pandas OK')"
RUN python -c "import pydantic; print('Pydantic OK')"
RUN python -c "import langchain_core; print('LangChain Core OK')"
RUN python -c "import langchain_community; print('LangChain Community OK')"
RUN python -m pip check
RUN Write-Host "All dependency verification completed successfully"

# Stage 3: Development (Windows)
FROM dependencies AS development

# Install development and testing dependencies
RUN pip install --no-cache-dir -e .[dev,all]

# Copy source code
COPY . .

# Create necessary directories
RUN New-Item -ItemType Directory -Force -Path C:\\app\\data, C:\\app\\outputs, C:\\app\\logs, C:\\app\\uploads, C:\\app\\test-results

# Expose ports (app and debugger)
EXPOSE 8000 5678

# Set development environment variables
ENV RAFT_ENVIRONMENT=development \
    RAFT_LOG_LEVEL=DEBUG

# Development command
CMD ["python", "-m", "raft_toolkit.web.app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Stage 4: Testing (Windows)
FROM development AS testing

# Set test environment variables
ENV RAFT_TESTING=true \
    RAFT_LOG_LEVEL=DEBUG \
    PYTHONPATH=C:\\app

# Run tests by default
CMD ["python", "-m", "pytest", "tests/", "-v", "--cov=raft_toolkit", "--cov-report=xml", "--cov-report=term-missing"]

# Stage 5: Production Web Application (Windows)
FROM dependencies AS production

# Install web dependencies
RUN pip install --no-cache-dir -e .[web]

# Copy source code
COPY . .

# Remove unnecessary files for production
RUN if (Test-Path raft_toolkit\\web) { Remove-Item -Recurse -Force raft_toolkit\\web }; \
    if (Test-Path tests) { Remove-Item -Recurse -Force tests }; \
    if (Test-Path docs) { Remove-Item -Recurse -Force docs }; \
    if (Test-Path examples) { Remove-Item -Recurse -Force examples }; \
    if (Test-Path .git) { Remove-Item -Recurse -Force .git }; \
    if (Test-Path .github) { Remove-Item -Recurse -Force .github }; \
    if (Test-Path notebooks) { Remove-Item -Recurse -Force notebooks }; \
    if (Test-Path scripts) { Remove-Item -Recurse -Force scripts }

# Create necessary directories
RUN New-Item -ItemType Directory -Force -Path C:\\app\\data, C:\\app\\outputs, C:\\app\\logs, C:\\app\\uploads

# Set production environment variables
ENV RAFT_ENVIRONMENT=production \
    RAFT_LOG_LEVEL=INFO \
    RAFT_LOG_FORMAT=json \
    RAFT_LOG_OUTPUT=stdout \
    PYTHONUNBUFFERED=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Switch to ContainerUser for security (Windows equivalent of non-root)
USER ContainerUser

# Expose port
EXPOSE 8000

# Production command using the web entry point
CMD ["python", "-m", "raft_toolkit.web.app", "--host", "0.0.0.0", "--port", "8000"]

# Stage 6: CLI-only (lightweight Windows)
FROM base AS cli

# Copy project configuration and install minimal dependencies
COPY pyproject.toml .

# Install only core dependencies (no web, no dev)
RUN python -m pip install --upgrade pip setuptools wheel; if ($LASTEXITCODE -ne 0) { exit 1 }
RUN python -m pip install --no-cache-dir -e .; if ($LASTEXITCODE -ne 0) { exit 1 }
RUN Write-Host "CLI dependencies installed successfully"

# Copy source files
COPY . .

# Remove unnecessary files for CLI-only image
RUN if (Test-Path raft_toolkit\\web) { Remove-Item -Recurse -Force raft_toolkit\\web }; \
    if (Test-Path tests) { Remove-Item -Recurse -Force tests }; \
    if (Test-Path docs) { Remove-Item -Recurse -Force docs }; \
    if (Test-Path examples) { Remove-Item -Recurse -Force examples }; \
    if (Test-Path .git) { Remove-Item -Recurse -Force .git }; \
    if (Test-Path .github) { Remove-Item -Recurse -Force .github }; \
    if (Test-Path notebooks) { Remove-Item -Recurse -Force notebooks }; \
    if (Test-Path scripts) { Remove-Item -Recurse -Force scripts }

# Create necessary directories
RUN New-Item -ItemType Directory -Force -Path C:\\app\\data, C:\\app\\outputs, C:\\app\\logs

# Set CLI environment variables
ENV RAFT_ENVIRONMENT=cli \
    RAFT_LOG_LEVEL=INFO \
    PYTHONUNBUFFERED=1

# Switch to ContainerUser for security
USER ContainerUser

# Set working directory for data processing
WORKDIR C:\\app

# CLI entry point using the CLI module
ENTRYPOINT ["python", "-m", "raft_toolkit.cli.main"]
CMD ["--help"]