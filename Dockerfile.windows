# Multi-stage Dockerfile for RAFT Toolkit (Windows)
# Follows Docker best practices and security guidelines for Windows containers

# Build arguments for dynamic configuration
ARG PYTHON_VERSION=3.11
ARG BUILD_DATE
ARG VERSION=0.2.0
ARG VCS_REF

# Stage 1: Base dependencies (Windows)
# Using Windows Server Core and manually installing Python
FROM mcr.microsoft.com/windows/servercore:ltsc2022 AS base

# Add metadata labels
LABEL maintainer="RAFT Toolkit Team" \
      description="Retrieval Augmented Fine-Tuning Toolkit for generating synthetic Q&A datasets" \
      version="${VERSION:-0.2.0}" \
      org.opencontainers.image.title="RAFT Toolkit" \
      org.opencontainers.image.description="Retrieval Augmented Fine-Tuning Toolkit" \
      org.opencontainers.image.version="${VERSION:-0.2.0}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.source="https://github.com/microsoft/raft-toolkit" \
      org.opencontainers.image.licenses="MIT"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH=C:\\app \
    PYTHONIOENCODING=utf-8 \
    PATH="C:\\Program Files\\Python311;C:\\Program Files\\Python311\\Scripts;${PATH}"

# Use PowerShell for RUN commands (more reliable on Windows containers)
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Install Python 3.11 manually
RUN Write-Host "Downloading Python 3.11.9..."; \
    $pythonMinorVersion = '3.11.9'; \
    $url = "https://www.python.org/ftp/python/$pythonMinorVersion/python-$pythonMinorVersion-amd64.exe"; \
    Write-Host "Downloading Python $pythonMinorVersion from: $url"; \
    try { \
        Invoke-WebRequest -Uri $url -OutFile python-installer.exe -UseBasicParsing; \
        $fileSize = (Get-Item python-installer.exe).Length; \
        Write-Host "Python installer downloaded successfully ($fileSize bytes)" \
    } catch { \
        Write-Host "ERROR: Failed to download Python installer: $_"; \
        exit 1 \
    }

RUN Write-Host "Installing Python..."; \
    $installArgs = @('/quiet', 'InstallAllUsers=1', 'PrependPath=1', 'Include_test=0', 'Include_doc=0', 'Include_dev=0', 'Include_debug=0', 'Include_launcher=1', 'Include_tcltk=0'); \
    $process = Start-Process python-installer.exe -Wait -ArgumentList $installArgs -PassThru; \
    if ($process.ExitCode -ne 0) { \
        Write-Host "ERROR: Python installation failed with exit code $($process.ExitCode)"; \
        exit 1 \
    }; \
    Remove-Item python-installer.exe; \
    Write-Host "Python installation completed successfully"

# Refresh environment variables and verify Python installation
RUN Write-Host "Refreshing environment and verifying Python..."; \
    $machinePath = [System.Environment]::GetEnvironmentVariable('PATH', 'Machine'); \
    $userPath = [System.Environment]::GetEnvironmentVariable('PATH', 'User'); \
    $env:PATH = "$machinePath;$userPath"; \
    Write-Host "Updated PATH: $env:PATH"; \
    \
    # Try to find Python executable
    $pythonPath = Get-Command python -ErrorAction SilentlyContinue; \
    if (-not $pythonPath) { \
        Write-Host "Python not found in PATH, searching for installation..."; \
        $pythonExe = Get-ChildItem -Path 'C:\Program Files\Python*' -Recurse -Name python.exe -ErrorAction SilentlyContinue | Select-Object -First 1; \
        if ($pythonExe) { \
            $pythonDir = Split-Path (Get-ChildItem -Path 'C:\Program Files\Python*' -Recurse -Filter python.exe | Select-Object -First 1).FullName; \
            $env:PATH = "$pythonDir;$env:PATH"; \
            Write-Host "Added Python directory to PATH: $pythonDir" \
        } else { \
            Write-Host "ERROR: Python executable not found anywhere"; \
            exit 1 \
        } \
    }; \
    \
    python --version; \
    if ($LASTEXITCODE -ne 0) { \
        Write-Host "ERROR: Python command failed"; \
        exit 1 \
    }; \
    Write-Host "Python verified successfully"

# Ensure pip is available and working
RUN Write-Host "Verifying pip installation..."; \
    python -m pip --version; \
    if ($LASTEXITCODE -ne 0) { \
        Write-Host "Pip not found, installing via ensurepip..."; \
        python -m ensurepip --upgrade; \
        if ($LASTEXITCODE -ne 0) { \
            Write-Host "ERROR: Failed to install pip via ensurepip"; \
            exit 1 \
        }; \
        python -m pip --version; \
        if ($LASTEXITCODE -ne 0) { \
            Write-Host "ERROR: Pip still not working after ensurepip"; \
            exit 1 \
        } \
    }; \
    Write-Host "Pip verified successfully"

RUN Write-Host "Python and pip installation completed successfully"

# Install system dependencies (Windows)
# Skip additional dependencies for basic functionality

# Set working directory
WORKDIR C:\\app

# Stage 2: Dependencies (Windows)
FROM base AS dependencies

# Copy project configuration
COPY pyproject.toml .

# Install Python dependencies with enhanced error handling
RUN python -m pip install --upgrade pip setuptools wheel; if ($LASTEXITCODE -ne 0) { exit 1 }
RUN python -m pip install --no-cache-dir -e .; if ($LASTEXITCODE -ne 0) { exit 1 }
RUN Write-Host "Core dependencies installed successfully"

# Verify critical imports work
RUN python -c "import pypdf; print('PyPDF OK')"
RUN python -c "import openai; print('OpenAI OK')"
RUN python -c "import transformers; print('Transformers OK')"
RUN python -c "import pandas; print('Pandas OK')"
RUN python -c "import pydantic; print('Pydantic OK')"
RUN python -c "import langchain_core; print('LangChain Core OK')"
RUN python -c "import langchain_community; print('LangChain Community OK')"
RUN python -m pip check
RUN Write-Host "All dependency verification completed successfully"

# Stage 3: Development (Windows)
FROM dependencies AS development

# Install development and testing dependencies
RUN pip install --no-cache-dir -e .[dev,all]

# Copy source code
COPY . .

# Create necessary directories
RUN New-Item -ItemType Directory -Force -Path C:\\app\\data, C:\\app\\outputs, C:\\app\\logs, C:\\app\\uploads, C:\\app\\test-results

# Expose ports (app and debugger)
EXPOSE 8000 5678

# Set development environment variables
ENV RAFT_ENVIRONMENT=development \
    RAFT_LOG_LEVEL=DEBUG

# Development command
CMD ["python", "-m", "raft_toolkit.web.app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Stage 4: Testing (Windows)
FROM development AS testing

# Set test environment variables
ENV RAFT_TESTING=true \
    RAFT_LOG_LEVEL=DEBUG \
    PYTHONPATH=C:\\app

# Run tests by default
CMD ["python", "-m", "pytest", "tests/", "-v", "--cov=raft_toolkit", "--cov-report=xml", "--cov-report=term-missing"]

# Stage 5: Production Web Application (Windows)
FROM dependencies AS production

# Install web dependencies
RUN pip install --no-cache-dir -e .[web]

# Copy source code
COPY . .

# Remove unnecessary files for production
RUN if (Test-Path raft_toolkit\\web) { Remove-Item -Recurse -Force raft_toolkit\\web }; \
    if (Test-Path tests) { Remove-Item -Recurse -Force tests }; \
    if (Test-Path docs) { Remove-Item -Recurse -Force docs }; \
    if (Test-Path examples) { Remove-Item -Recurse -Force examples }; \
    if (Test-Path .git) { Remove-Item -Recurse -Force .git }; \
    if (Test-Path .github) { Remove-Item -Recurse -Force .github }; \
    if (Test-Path notebooks) { Remove-Item -Recurse -Force notebooks }; \
    if (Test-Path scripts) { Remove-Item -Recurse -Force scripts }

# Create necessary directories
RUN New-Item -ItemType Directory -Force -Path C:\\app\\data, C:\\app\\outputs, C:\\app\\logs, C:\\app\\uploads

# Set production environment variables
ENV RAFT_ENVIRONMENT=production \
    RAFT_LOG_LEVEL=INFO \
    RAFT_LOG_FORMAT=json \
    RAFT_LOG_OUTPUT=stdout \
    PYTHONUNBUFFERED=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Production command using the web entry point
CMD ["python", "-m", "raft_toolkit.web.app", "--host", "0.0.0.0", "--port", "8000"]

# Stage 6: CLI-only (lightweight Windows)
FROM base AS cli

# Copy project configuration and install minimal dependencies
COPY pyproject.toml .

# Install only core dependencies (no web, no dev)
RUN python -m pip install --upgrade pip setuptools wheel; if ($LASTEXITCODE -ne 0) { exit 1 }
RUN python -m pip install --no-cache-dir -e .; if ($LASTEXITCODE -ne 0) { exit 1 }
RUN Write-Host "CLI dependencies installed successfully"

# Copy source files
COPY . .

# Remove unnecessary files for CLI-only image
RUN if (Test-Path raft_toolkit\\web) { Remove-Item -Recurse -Force raft_toolkit\\web }; \
    if (Test-Path tests) { Remove-Item -Recurse -Force tests }; \
    if (Test-Path docs) { Remove-Item -Recurse -Force docs }; \
    if (Test-Path examples) { Remove-Item -Recurse -Force examples }; \
    if (Test-Path .git) { Remove-Item -Recurse -Force .git }; \
    if (Test-Path .github) { Remove-Item -Recurse -Force .github }; \
    if (Test-Path notebooks) { Remove-Item -Recurse -Force notebooks }; \
    if (Test-Path scripts) { Remove-Item -Recurse -Force scripts }

# Create necessary directories
RUN New-Item -ItemType Directory -Force -Path C:\\app\\data, C:\\app\\outputs, C:\\app\\logs

# Set CLI environment variables
ENV RAFT_ENVIRONMENT=cli \
    RAFT_LOG_LEVEL=INFO \
    PYTHONUNBUFFERED=1

# Set working directory for data processing
WORKDIR C:\\app

# CLI entry point using the CLI module
ENTRYPOINT ["python", "-m", "raft_toolkit.cli.main"]
CMD ["--help"]