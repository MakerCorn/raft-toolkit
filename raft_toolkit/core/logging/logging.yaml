# Enhanced logging configuration for RAFT Toolkit
# This file provides a comprehensive logging setup with multiple formatters and handlers
# Includes support for distributed tracing and external service integration

version: 1
disable_existing_loggers: False

formatters:
    # Standard formatter with progress and trace tracking
    standard:
        format: '%(asctime)s %(levelname)8s [%(progress)4s] %(name)s: %(message)s'
        datefmt: '%Y-%m-%d %H:%M:%S'
    
    # Minimal formatter for simple output
    minimal:
        format: '%(levelname)s: %(message)s'
    
    # JSON formatter for structured logging with tracing
    json:
        class: core.logging.setup.JSONFormatter
    
    # Colored formatter for enhanced console output with tracing
    colored:
        class: core.logging.setup.ColoredConsoleFormatter
        format: '%(asctime)s %(levelname)8s %(name)s: %(message)s'
        datefmt: '%Y-%m-%d %H:%M:%S'
    
    # Trace-aware formatter for distributed tracing
    traced:
        format: '%(asctime)s %(levelname)8s [%(trace_id)8s] [%(progress)4s] %(name)s: %(message)s'
        datefmt: '%Y-%m-%d %H:%M:%S'

handlers:
    # Console handler with colored output
    console:
        class: logging.StreamHandler
        level: INFO
        formatter: colored
        stream: ext://sys.stdout

    # File handler with standard formatting
    file:
        class: logging.FileHandler
        level: DEBUG
        formatter: standard
        filename: logs/raft.log
        mode: 'a'
        encoding: utf8
    
    # JSON file handler for structured logs
    json_file:
        class: logging.FileHandler
        level: DEBUG
        formatter: json
        filename: logs/raft.json
        mode: 'a'
        encoding: utf8

    # Rotating file handler for production use
    rotating_file:
        class: logging.handlers.RotatingFileHandler
        level: INFO
        formatter: standard
        filename: logs/raft_rotating.log
        maxBytes: 10485760  # 10MB
        backupCount: 5
        encoding: utf8

root:
    level: INFO
    handlers: [console, file]

loggers:
    # RAFT Toolkit loggers
    raft:
        level: INFO
        handlers: []
        propagate: true
    
    raft_cli:
        level: INFO
        handlers: []
        propagate: true
    
    raft.engine:
        level: INFO
        handlers: []
        propagate: true
    
    raft.services:
        level: INFO
        handlers: []
        propagate: true
    
    # Third-party library loggers (reduced noise)
    httpx:
        level: WARNING
        handlers: []
        propagate: true
    
    urllib3:
        level: WARNING
        handlers: []
        propagate: true
    
    requests:
        level: WARNING
        handlers: []
        propagate: true
    
    openai:
        level: WARNING
        handlers: []
        propagate: true
    
    langchain:
        level: WARNING
        handlers: []
        propagate: true
    
    langchain_community.utils.math:
        level: WARNING
        handlers: []
        propagate: true

# Tracing Configuration Examples (Environment Variables)
# RAFT_TRACING_ENABLED=true              # Enable distributed tracing
# RAFT_TRACE_SERVICE_NAME=raft-toolkit   # Service name for traces
# RAFT_TRACE_SAMPLING_RATE=1.0          # Sampling rate (0.0 to 1.0)
# RAFT_JAEGER_ENDPOINT=http://localhost:14268/api/traces  # Jaeger endpoint
# RAFT_TRACE_CONSOLE=false              # Export traces to console

# External Logging Integration Examples
# RAFT_SENTRY_DSN=https://your-dsn@sentry.io/project     # Sentry error tracking
# RAFT_DATADOG_API_KEY=your-api-key                      # DataDog metrics
# RAFT_DATADOG_SERVICE=raft-toolkit                      # DataDog service name